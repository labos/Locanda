package utils;

import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;

import org.apache.log4j.Logger;
import org.codehaus.jackson.JsonParser;
import org.codehaus.jackson.JsonProcessingException;
import org.codehaus.jackson.map.DeserializationContext;
import org.codehaus.jackson.map.JsonDeserializer;

public class JsonDateDeserializer extends JsonDeserializer<Date> {

    @Override
    public Date deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) throws IOException, JsonProcessingException {

        String param = jsonparser.getText();

        // The timestamp is generated by the client with a given timezone.
        // The same timezone is used by the server (Locanda is packaged as a desktop app).
        // We calculate the timezone offset and add it to the timestamp provided by the client.
        long offset = TimeZone.getTimeZone(ZoneId.systemDefault()).getRawOffset();
        long timestamp = Long.valueOf(param);
        Instant instant = Instant.ofEpochMilli(timestamp + offset);

        LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
        Date date = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());

        return date;

    }

}
